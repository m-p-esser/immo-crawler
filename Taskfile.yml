# https://taskfile.dev

version: '3'

dotenv: ['.env']

vars:
  SERVICE_ACCOUNT: 'etl-airflow-test'  

tasks:

# Commands to interact to activate/expand access rights
  set-default-gcp-project:
    desc: Set default GCP project 
    cmds:
      - echo "Setting default GCP project to '$GCLOUD_PROJECT'"
      - gcloud config set project $GCLOUD_PROJECT

  set-main-account-as-default-gcp-account:
    desc: Setting main account as default account for GCP
    cmds:
    - echo "Setting main account '$GCLOUD_MAIN_ACCOUNT' as default account for GCP"
    - gcloud config set account $GCLOUD_MAIN_ACCOUNT

  authenticate-with-gcp:
    desc: Authenticate with GCP
    cmds:
    - gcloud auth login

  enable-gcp-services:
    deps: [set-main-account-as-default-gcp-account]
    desc: Enable GCP Services required for this repo 
    cmds:
      - echo "Enabling GCP services"
      - for: [
        'storage-component.googleapis.com', 
        'secretmanager.googleapis.com',
        'compute.googleapis.com']
        cmd: gcloud services enable {{.ITEM}}

  create-service-account:
    deps: [set-main-account-as-default-gcp-account]
    desc: Create Service account
    cmds:
    - echo "Creating Service account {{.SERVICE_ACCOUNT}}"
    - gcloud iam service-accounts create {{.SERVICE_ACCOUNT}}
  
  create-service-account-key-file:
    desc: Create JSON Keyfile for Service account that can be used for authentification with GCP
    cmds:
    - echo "Creating Keyfile for Service account"
    - mkdir -p .secrets
    - gcloud iam service-accounts keys create ./.secrets/{{.SERVICE_ACCOUNT}}_keyfile.json --iam-account={{.SERVICE_ACCOUNT}}@$GCLOUD_PROJECT.iam.gserviceaccount.com
    - echo "Created keyfile and stored it under './.secrets/{{.SERVICE_ACCOUNT}}_keyfile.json'"
    
  bind-iam-policies-to-service-account:
    deps: [set-main-account-as-default-gcp-account]
    desc: Give Service accounts access rights for GCP Services
    cmds:
      - echo "Bind IAM Policies to Service account {{.SERVICE_ACCOUNT}}"
      - for: [
        'roles/storage.admin', 'roles/secretmanager.secretAccessor', 'roles/compute.admin']
        cmd: gcloud projects add-iam-policy-binding $GCLOUD_PROJECT --member=serviceAccount:{{.SERVICE_ACCOUNT}}@{{.GCLOUD_PROJECT}}.iam.gserviceaccount.com --role={{.ITEM}}

# Commands to interacte with Google Cloud VM    
  create-and-configure-airflow-vm:
    deps: [
      set-main-account-as-default-gcp-account,
      create-airflow-vm-instance,
      # create-airflow-vm-ops-agent-policy,
      create-airflow-vm-snapshot-schedule,
      create-airflow-vm-disk
    ]
    desc: Create and configure GCP VM that will be used to run Airflow Jobs

  # Use Google Cloud interface instead
  # create-airflow-vm-instance:
  #   deps: [set-main-account-as-default-gcp-account]
  #   desc: Create GCP VM that will be used to run Airflow Jobs
  #   cmds:
  #     - echo "Provisioning Google Cloud VM"
  #     - gcloud compute instances create airflow-$ENVIRONMENT-vm-euwe4a-debian-408f \
  #       --project=$GCLOUD_PROJECT \
  #       --zone=$GCLOUD_DEFAULT_ZONE \
  #       --region=$GCLOUD_DEFAULT_REGION \
  #       --machine-type=e2-micro \
  #       --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=default \
  #       --metadata=enable-osconfig=TRUE \
  #       --maintenance-policy=MIGRATE \
  #       --provisioning-model=STANDARD \
  #       --service-account={{.SERVICE_ACCOUNT}}@$GCLOUD_PROJECT.iam.gserviceaccount.com \
  #       --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/trace.append \
  #       --create-disk=auto-delete=yes,boot=yes,device-name=airflow-$ENVIRONMENT-vm-euwe4a-debian-408f,image=projects/debian-cloud/global/images/debian-12-bookworm-v20250513,mode=rw,size=10,type=pd-balanced \
  #       --no-shielded-secure-boot \
  #       --shielded-vtpm \
  #       --shielded-integrity-monitoring \
  #       --reservation-affinity=any

  setup-airflow-vm:
    uv run playwright install
    # Install UV
    # Install Airflow

  ssh-add-keys-to-vm:
    desc: Add Public SSH Key to all VM instances in a GCP Project
    dir: ../../.ssh
    cmds:
      - echo "Current directory:"
      - pwd
      - gcloud compute os-login ssh-keys add --key-file=id_rsa.pub --project=$GCLOUD_PROJECT

  ssh-into-airflow-vm:
    desc: SSH into Airflow GCP VM
    dir: ../../.ssh
    cmds:
      - echo "Current directory:"
      - pwd
      - ssh -i id_rsa emarcphilipp_gmail_com@$GCLOUD_AIRFLOW_VM_EXTERNAL_IP

# Commands to interact with Docker
  build-airflow-docker-image:
   docker build -t $GCLOUD_REGION
  # Continue https://www.perplexity.ai/search/how-can-i-enable-compute-engin-WLQaNWY1QIS8DmQyunaboQ